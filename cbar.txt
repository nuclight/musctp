   !!! early draft!

      CBAR: CBOR and generic BLOBs by-Atom Reducing
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1.


1.1. Terminology

   Nibble - half of byte, 4 bits, one hexadecimal digit.

   Sextet - 6 bits, digit of 64-ary numeral system

2. VarNibble.

   This is a variable-length integer encoding on the sub-byte resolution. It
   occupies integral number of nibbles and utilizes addition scheme in
   a manner similar to CoAP [RFC 7252] option delta encoding: the lowest
   possible values are encoded as themselves, and at each increasing of length
   value zero of expanded bitfield is total 

   Enconding                                               Total values / zero
                                                           of next level's
      0                                                    Biased Value
      0 1 2 3
     +-+-+-+-+
     | 0..9  | Integers from 0 to 9, themselves
     +-+-+-+-+

      0               
      0 1 2 3 4 5 6 7 
     +-+-+-+-+-+-+-+-+
     |  0xa  |B.Val. | Integer Values from 10 to 25            10 + 16 = 26
     +-+-+-+-+-+-+-+-+

      0
      0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+
     |  0xb  | Biased Value  | Integer Values from 26 to 281   26 + 256 = 282
     +-+-+-+-+-+-+-+-+-+-+-+-+

      0                   1
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |  0xc  | Biased Value, 12 bits | ...and so on            282 + 4096
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

      0                   1                   
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |  0xd  |     Biased Value, 16 bits     |                 4378 + 65536
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

      0                   1                   2
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |  0xe  |         Biased Value, 20 bits         |         69914 + 1048576
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

      0                   1                   2
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |  0xf  |             Biased Value, 24 bits             | 1118490 + 2^24
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   For example, integer value 17 is encoded as two nibbles 0xa7, and value 42
   is encoded as three nibbles 0xb14.


2.1. VarNibbles.

   This is array, occupying integral number of bytes, each individual element
   is a VarNible. How possible 4-bit padding is treated by upper layer, e.g.
   in a sequence of delta-encoding last nibble could just 0 (indicating no
   difference from previous value), and other schemes could employ explicit
   count of nibbles, so possible last nibble could be ignored if total number
   is odd.

3. The CBAR encoding.

   CBAR-based protocol defines two dictionaries: one is byte string, virtually
   prepended to output buffer for backreferences (but which is not part of
   output itself), and other dictionary is a set of atoms. In degenerate case
   both dictionaries are empty so that compression is possible only by RLE
   (run-length encoding) and backreferences in the compressed data itself.

   An atom is a byte string (3 bytes or more) which, with it's length, is
   known both to compressor and decompressor under some number. So, when
   decompressor sees instruction "use atom 42", it looks up 42-th entry in
   atom dictionary and substitutes this bytestring to output instead of atom
   number. Atoms are numbered from 0 (zero), and lower atom numbers are
   assumed to be used more often.

3.1. Wire format.

   The CBAR record as input to decompressor consists of integral number of
   bytes, which total length is told to decompressor by upper protocol. CBAR
   is inspired by SQLite Row Format [https://www.sqlite.org/fileformat2.html#record_format]
   but using VarNibbles. CBAR contains a header and a body, in that order, each
   of integral number of bytes. The header is a VarNibbles array, where each
   VarNibble is an instruction (operation code) to decompressor, and body,
   also called content area, contains bytes which are used by append to output
   buffer instructions.

   The header begins with a single VarNibble which determines the total number
   of nibbles in the header. The VarNibble value is the size of the header in
   nibbles including the size VarNibble itself, minus one. If size VarNibble
   is special value zero, this means "decompressed data is empty byte string"
   (in such a case, CBAR record MUST consist of a single byte 0x00, other
   possible values for low nibble are reserved).

   If header ended, but there are still unconsumed bytes in content area,
   all of them are appended to output as if header had implicit last
   instruction "append all bytes of remaining length". This allows to reduce
   overhead of uncompressible data to just 1 single byte of CBAR header.

   Following the size VarNibble are one or more additional VarNibbles, one
   per instruction. These additional VarNibbles are called "serial code"
   numbers and determine the instruction, according to the following chart:

TBD may be low bit in size VarNibble is flag so that next is CRC-24 [RFC 4880]
plus 1118490 (so it always 3 bytes to simplify encoder padding)
-> if such bit, only after some first values, to still allow 1-byte header
  -> instead bit, put RLE a1 instead of CRC if first operation is fxxxxxx?

TBD problem with nibble alignment when generating - moving 4 Mb due to odd len is not fun

       0   1   2   3   4   5   6   7
     +---+---+---+---+---+---+---+---+...
     | 0 |Header Len |Header Area, 7 nibbles max 
     +---+---+---+---+---+---+---+---+...

so for len 0 it is 0x00 byte meaning empty string

for below, off by one, hlen = 0 means one, and:
    if (CRC) hlen += 7
    if (Nxt) hlen += 1

       0   1   2   3   4   5   6   7
     +---+---+---+---+---+---+---+---+=============+==============+
     | 1   0 |CRC|   Header Length   | Header Area | Content Area |
     +---+---+---+---+---+---+---+---+=============+==============+

       0   1   2   3   4   5   6   7   8   9   10  11  12  13  14  15
     +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+...
     | 1   1 |CRC|Nxt|                 Header Length                 |
     +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+...

TBD this is 12 bit, make it another 3rd byte so 11 bit / 19 bit?

TBD why CRC in VarNibble? this is waste of 4 bits

-- variant 2:

0x00 .. 0x09 = empty string or VarNibble - 1 (0..8)

       0   1   2   3   4   5   6   7
     +---+---+---+---+---+---+---+---+...
     | 0 |   Opcode Length + 3   |CRC|
     +---+---+---+---+---+---+---+---+...

       0   1   2   3   4   5   6   7   8   9   10  11  12  13  14  15
     +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+...
     | 1 |Nxt|CRC|               Opcode Length - 60                  |
     +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+...

TBD why CRC at all? caller may use any wanted algorithm

TBD flag "Next" has same problem as header itself - length not yet known at start

-- variant 3:

0x00 .. 0x09 = empty string or VarNibble - 1 (0..8)

       0   1   2   3   4   5   6   7
     +---+---+---+---+---+---+---+---+...
     |  9 < Opcode Length + 8 < 240  | Instruction Area 1 to 116 bytes
     +---+---+---+---+---+---+---+---+...

  249 - 241 nibbles and 12 bits literal length
  250 - 242 nibbles and 8 bits literal length
  251 - 241 nibbles and 20 bits literal length
  252 - 242 nibbles and 16 bits literal length
  253 - 241 nibbles
  254 - 242 nibbles and 24 bits literal length
  255 - 241 nibbles and 28 bits literal length

TBD no, up to 7 nibbles may be when still has to next

       0   1   2   3   4   5   6   7
     +---+---+---+---+---+---+---+---+...
     | 1   1   1   1 | Tail  | Next  | Instruction Area 1 to 116 bytes
     +---+---+---+---+---+---+---+---+...

TBD just size VarNibble at end if next?


RFC 7400 quote:
   +----------+---------------------------------------------+----------+
   | code     | Action                                      | Argument |
   | byte     |                                             |          |
   +----------+---------------------------------------------+----------+
   | 0kkkkkkk | Append k = 0b0kkkkkkk bytes of data in the  | k bytes  |
   |          | bytecode argument (k < 96)                  | of data  |
   |          |                                             |          |
   | 1000nnnn | Append 0b0000nnnn+2 bytes of zeroes         |          |
   |          |                                             |          |
   | 10010000 | stop code (end of compressed data; see      |          |
   |          | Section 3.2)                                |          |
   |          |                                             |          |
   | 101nssss | Set up extended arguments for a             |          |
   |          | backreference: sa += 0b0ssss000,            |          |
   |          | na += 0b0000n000                            |          |
   |          |                                             |          |
   | 11nnnkkk | Backreference: n = na+0b00000nnn+2;         |          |
   |          | s = 0b00000kkk+sa+n; append n bytes from    |          |
   |          | previously output bytes, starting s bytes   |          |
   |          | to the left of the current output pointer;  |          |
   |          | set sa = 0, na = 0                          |          |
   +----------+---------------------------------------------+----------+

TBD ssss nnn kkk widths for backref/args instructions

   Serial Code | Hex  | Action
   ============+======+==============================================
        0      |  0   | Append 0x00
        1      |  1   | Append 0x01
        2      |  2   | Prefix next element with CBOR Major 2 length
        3      |  3   | Prefix next element with CBOR Major 3 length
        4      |  4   | Append 0xf4 (CBOR false)
        5      |  5   | Append 0xf5 (CBOR true)
        6      |  6   | Append 0xf6 (CBOR null)
        7      |  7   | Append 0xff
        8      |  8   | Append 0x20 (CBOR -1)
        9      |  9   | Append 1 content byte
   ------------+------+----------------------------------------------
        10     |  a0  | Append 2 content bytes 
        11     |  a1  | RLE: repeat last output
        12     |  a2  | RLE: repeat last output 2 times
        13     |  a3  | RLE: repeat last output 3 times
        14     |  a4  | RLE: repeat last output 4 times
        15     |  a5  | RLE: repeat last output 5 times
        16     |  a6  | RLE: repeat last output 6 times
        17     |  a7  | RLE: repeat last output 7 times
        18     |  a8  | RLE: repeat last output 8 times
        19     |  a9  | RLE: repeat last output 9 times
        20     |  aa  | Set up extended argument for backreference: na += 16
        21     |  ab  | Set up extended argument for backreference: na += 32
        22     |  ac  | Set up extended argument for backreference: na += 64
        23     |  ad  | Set up extended argument for backreference: na += 128
        24     |  ae  | Set up extended argument for backreference: na += 256
        25     |  af  | Reserved for future use, MUST throw error
   ------------+------+---------------------------------------------
    for N>=26:  R = 0 | Append atom with number M
      if even,        |
         set:   R = 2 | Append M+3 content bytes
    M=(N-26)/4        |
    R=(N-26)%4        |
                      | Backreference: n = na + (B % 16), s = (B / 16) + n,
      if odd,         | append n bytes from previously output bytes,
       set B=(N-26)/2 | starting s bytes to the left of the current
                      | output pointer; set na = 0

TBD

   To illustrate how different operations interact with others (especially
   prefixes and RLE), the following pseudocode defines how decompressor
   funstions use variables:

    append(src, len):
        if (src == NULL)
	    throw decode error
        if (prefix) {
            char prefbuf[9]
            pl = encode_cbor_uint(len)
            prefbuf[0] |= (prefix == 2) ? 0x40 : 0x60

            obuf[optr .. optr+pl-1] = prefbuf[0 .. pl-1]
            optr += pl

            prefix = 0;
       }

       obuf[optr .. optr+len-1] = src[0 .. len-1]
       lastoptr = optr
       lastlen  = len

       optr += len

    append_short(code):
        shorts = {0x00, 0x01, NULL, NULL, 0xf4, 0xf5, 0xf6, 0xff, 0x20}
        append(shorts[code], 1)

    append_content(N):
        append(content[iptr], N)
	iptr += N

TBD include prefix in RLE or not?
    rle(count):
        while (count-- > 0) {
	    obuf[optr .. optr+lastlen-1] = obuf[lastoptr .. last_optr+lastlen-1]
	    optr += lastlen
	}

    atom(M):
        append(atoms[M][0], length(atoms[M]))

    backreference(s, n):
        n += na + 2
        append(obuf[optr - s - n], n)
	na = 0

TODO


6. Using CBAR inside CBOR.

   CBAR is a building block for other protocols, and some protocols may want
   to augment CBOR decoder with CBAR decompressor. In such case, CBAR is
   contained in a CBOR byte string (Major Type 2) inside a tagged array, and
   from the consumer point of view result of CBAR decompression is "replaces"
   this array. In this array, everything except CBAR bytestring is optional,
   with default values defined by upper layer protocol.

   Instead of directly supplying atoms array (where each atom number is just
   index of string in array) with bytestring dictionary, applications may also
   choose to just refer to some dictionary defined in other place, by
   specifying it's hash for error checking. This is similar to specifying
   CRC-32 / Adler-32 checksum of deflate dictionary in zlib library, or in
   LZ4 frame.

TBD correct CDDL syntax

   CBAR-CBOR = #6.10([atoms, bytedict, CBAR, checksum])  ; Tag 0x0a for "Atom"
             / #6.10(CBAR)    ; binary string - everything other setup earlier

   atomarr = [ + bstr ]

   atoms = atomarr / uint / bstr,    ; atoms array (mb empty) or their hash
   bytedict = bstr / uint,           ; byte dictionary (mb empty) or it's hash
   CBAR = bstr .size (9..),
   ? checksum = uint

TBD may be RFC 6920 ?

TODO

=========== Format with bytes & Pyramint5 instead of VarNibbles =====

   This is a variation of static Huffman encoding of unsigned integer, in
   a "pyramid" way, where first (most wide) is exact value, and each next level
   is in "units" of next power of two after maximal value of previous level. Levels are
   encoded as bit prefixes 0, 10, 110, etc.

   For example, Pyramint5 is

   * 0aaaa - unit is 1, so values 00000 to 01111 are 0..15
   * 10bbb - now unit is 16, 15+1, and bbb=000 means 16, bbb=001 means 32,
             so e.g. overall Pyramint5 value 10001 means 32, and maximal value
	     at this level, bbb=111 and overall Pyramint5 10111 - is 128.
   * 110cc - remember, zero value at next level is next power of two, not just
             one "unit", so cc=00, or overall 11000, is 256 now! Then are 512, 768
	     and maximum - 1024.
   * 1110d - at the last level only one bit it left, so there are just two
             values - 2048 and 4096.
   * 11110 - we also can define this as 8192, though no bits left
   * 11111 - similarly, maximum possible value will be 16384

   Extending one bit, we get Pyramint6 as follows:

   0aaaaa  - 0..31 * unit=1
   10bbbb  - 0..15 * unit=32    -> from 32    to max 512
   110ccc  - 0..7  * unit=1024  -> from 1024  to max 8192
   1110dd  - 0..3  * unit=16384 -> from 16384 to max 65536
   11110e  - 0..1  * unit=128 K -> from 128 K to max 256 K
   111110  - 512 K
   111111  - 1 M

pyramint4:                             1000 1001 1010 1011 1100 1101 1110 1111  
  0    1    2    3    4    5    6    7    8   16   32   64  128  256  512 1024

   additional information values:
   +------------+------------------------------------+----------+
   | 00000nnn  | Append 0b00000nnn+1 bytes of zeroes
   | 00001nnn  | Append 0b00000nnn+1 bytes of 0xff
   | 0x10   16 | Append 0x20 (CBOR int -1)
   | 0x11   17 | Append 0x01 (CBOR int 1)
   | 0x12   18 | Append 0x02 (CBOR int 2)
   | 0x13   19 | Append 0x03 (CBOR int 3)
   | 0x14   20 | Append 0xf4 (CBOR false)
   | 0x15   21 | Append 0xf5 (CBOR true)
   | 0x16   22 | Append 0xf6 (CBOR null)
   | 0x17   23 | Append ??? 
   | 0x18   24 | RLE: repeat last output
   | 0x19   25 | RLE: repeat last output 2 times
   | 0x1a   26 | RLE: repeat last output 4 times
   | 0x1b   27 | RLE: repeat last output 8 times
   | 0x1c   28 | Reserved
   | 0x1d   29 | Reserved
   | 0x1e   30 | Reserved
   | 0x1f   31 | Stop code: append everything what left in literals
   +------------+------------------------------------+----------+

TBD text string can't contain repeated runs of 00/f4/f5/f6/ff !


main bytecodes:
   +-------------------+------------------------------------+----------+
   |                   | 
   | 000kkkkk          | Append k+1 bytes of data in the bytecode argument
   |                   | 
   | 001kkkkk kkkkkkkk | Append k+31 bytes of data in the bytecode argument
   |                   | 
   | 010kkkkk          | Append k+23 bytes of data in the bytecode argument,
   |                   | prefixed with CBOR Major 2 length of k+23 (bstr)
   |                   | 
   | 011kkkkk          | Append k+23 bytes of data in the bytecode argument,
   |                   | prefixed with CBOR Major 3 length of k+23 (tstr)
   |                   | 
   | 100ddddd          | Special values from additional information 
   |                   | 
   | 1010tttt tttttttt | Atom: append content of atom a=aa+0b0tttttttttttt,
   |                   | set aa = 0
   |                   | 
   | 1011iiii          | aa += 4096 * (0b0iiii + 1);
   |                   | 
   |                   | Set up extended arguments for a backreference:
   |                   | 
   | 1100ssss          | sa += 512 * (0b0ssss + 1)
   |                   | 
   | 1101nnnn          | na += 0b0nnnn0000 + 16
   |                   | 
   | 111nnnnk kkkkkkkk | Backreference: n = na+0b0000nnnn+2;
   |                   | s = k+sa+n; append n bytes from
   |                   | previously output bytes, starting s bytes
   |                   | to the left of the current output pointer;
   |                   | set sa = 0, na = 0
   +-------------------+------------------------------------+----------+

perl -E 'use CBOR::XS; sub true {1}; print encode_cbor [
   ["algorithm", "HMAC", "SHA1"] => true,
   ["algorithm", "HMAC", "SipHash", 0, 0] => 2,
   ["algorithm", "HMAC", "SipHash", 0, 1] => 4,
   ["algorithm", "kex"] => [
   				"curve25519-sha256",
				"curve25519-sha256@libssh.org",
				"ecdh-sha2-nistp256",
				"ecdh-sha2-nistp384",
				"ecdh-sha2-nistp521",
				"diffie-hellman-group-exchange-sha256",
				"diffie-hellman-group16-sha512",
				"diffie-hellman-group18-sha512",
				"diffie-hellman-group14-sha256",
				"diffie-hellman-group14-sha1"
			],
   ["algorithm", "key"] => [
				"ssh-rsa",
				"rsa-sha2-512",
				"rsa-sha2-256",
				"ecdsa-sha2-nistp256",
				"ssh-ed25519"
			],
   ["algorithm", "ciphers"] => [
				"chacha20-poly1305@openssh.com",
				"aes128-ctr",
				"aes192-ctr",
				"aes256-ctr",
				"aes128-gcm@openssh.com",
				"aes256-gcm@openssh.com",
				"aes128-cbc",
				"aes192-cbc",
				"aes256-cbc"
			],
   ["assoc", "retrans", "max"] => 3,
   ["dev", "cpu", 0, "temperature"] => 64.1,
]' | hexdump -C
00000000  90 83 49 61 6c 67 6f 72  69 74 68 6d 44 48 4d 41  |..IalgorithmDHMA|
00000010  43 44 53 48 41 31 f5 85  49 61 6c 67 6f 72 69 74  |CDSHA1..Ialgorit|
00000020  68 6d 44 48 4d 41 43 47  53 69 70 48 61 73 68 00  |hmDHMACGSipHash.|
00000030  00 02 85 49 61 6c 67 6f  72 69 74 68 6d 44 48 4d  |...IalgorithmDHM|
00000040  41 43 47 53 69 70 48 61  73 68 00 01 04 82 49 61  |ACGSipHash....Ia|
00000050  6c 67 6f 72 69 74 68 6d  43 6b 65 78 8a 51 63 75  |lgorithmCkex.Qcu|
00000060  72 76 65 32 35 35 31 39  2d 73 68 61 32 35 36 55  |rve25519-sha256U|
00000070  63 75 72 76 65 32 35 35  31 39 2d 73 68 61 32 35  |curve25519-sha25|
00000080  36 2e 6f 72 67 52 65 63  64 68 2d 73 68 61 32 2d  |6.orgRecdh-sha2-|
00000090  6e 69 73 74 70 32 35 36  52 65 63 64 68 2d 73 68  |nistp256Recdh-sh|
000000a0  61 32 2d 6e 69 73 74 70  33 38 34 52 65 63 64 68  |a2-nistp384Recdh|
000000b0  2d 73 68 61 32 2d 6e 69  73 74 70 35 32 31 58 24  |-sha2-nistp521X$|
000000c0  64 69 66 66 69 65 2d 68  65 6c 6c 6d 61 6e 2d 67  |diffie-hellman-g|
000000d0  72 6f 75 70 2d 65 78 63  68 61 6e 67 65 2d 73 68  |roup-exchange-sh|
000000e0  61 32 35 36 58 1d 64 69  66 66 69 65 2d 68 65 6c  |a256X.diffie-hel|
000000f0  6c 6d 61 6e 2d 67 72 6f  75 70 31 36 2d 73 68 61  |lman-group16-sha|
00000100  35 31 32 58 1d 64 69 66  66 69 65 2d 68 65 6c 6c  |512X.diffie-hell|
00000110  6d 61 6e 2d 67 72 6f 75  70 31 38 2d 73 68 61 35  |man-group18-sha5|
00000120  31 32 58 1d 64 69 66 66  69 65 2d 68 65 6c 6c 6d  |12X.diffie-hellm|
00000130  61 6e 2d 67 72 6f 75 70  31 34 2d 73 68 61 32 35  |an-group14-sha25|
00000140  36 58 1b 64 69 66 66 69  65 2d 68 65 6c 6c 6d 61  |6X.diffie-hellma|
00000150  6e 2d 67 72 6f 75 70 31  34 2d 73 68 61 31 82 49  |n-group14-sha1.I|
00000160  61 6c 67 6f 72 69 74 68  6d 43 6b 65 79 85 47 73  |algorithmCkey.Gs|
00000170  73 68 2d 72 73 61 4c 72  73 61 2d 73 68 61 32 2d  |sh-rsaLrsa-sha2-|
00000180  35 31 32 4c 72 73 61 2d  73 68 61 32 2d 32 35 36  |512Lrsa-sha2-256|
00000190  53 65 63 64 73 61 2d 73  68 61 32 2d 6e 69 73 74  |Secdsa-sha2-nist|
000001a0  70 32 35 36 4b 73 73 68  2d 65 64 32 35 35 31 39  |p256Kssh-ed25519|
000001b0  82 49 61 6c 67 6f 72 69  74 68 6d 47 63 69 70 68  |.IalgorithmGciph|
000001c0  65 72 73 89 55 63 68 61  63 68 61 32 30 2d 70 6f  |ers.Uchacha20-po|
000001d0  6c 79 31 33 30 35 2e 63  6f 6d 4a 61 65 73 31 32  |ly1305.comJaes12|
000001e0  38 2d 63 74 72 4a 61 65  73 31 39 32 2d 63 74 72  |8-ctrJaes192-ctr|
000001f0  4a 61 65 73 32 35 36 2d  63 74 72 4e 61 65 73 31  |Jaes256-ctrNaes1|
00000200  32 38 2d 67 63 6d 2e 63  6f 6d 4e 61 65 73 32 35  |28-gcm.comNaes25|
00000210  36 2d 67 63 6d 2e 63 6f  6d 4a 61 65 73 31 32 38  |6-gcm.comJaes128|
00000220  2d 63 62 63 4a 61 65 73  31 39 32 2d 63 62 63 4a  |-cbcJaes192-cbcJ|
00000230  61 65 73 32 35 36 2d 63  62 63 83 45 61 73 73 6f  |aes256-cbc.Easso|
00000240  63 47 72 65 74 72 61 6e  73 43 6d 61 78 03 84 43  |cGretransCmax..C|
00000250  64 65 76 43 63 70 75 00  4b 74 65 6d 70 65 72 61  |devCcpu.Ktempera|
00000260  74 75 72 65 fb 40 50 06  66 66 66 66 66           |ture.@P.fffff|

perl -E 'use CBOR::XS; print encode_cbor [
   [30, 31, 32]		=> \1,              
   [30, 31, 33, 0, 0]	=> 2,
   [30, 31, 33, 0, 1]	=> 4,
   [30, 34]		=> [35, 36, 37, 38, 39, 40, 41, 42, 43, 44],
   [30, 45]		=> [46, 47, 48, 49, 50],
   [30, 51]		=> [52, 53, 54, 55, 56, 57, 58, 59, 60],
   [61, 62, 63]		=> 3,
   [64, 65, 0, 66]	=> 64.1,
]' | hexdump -C
00000000  90 83 18 1e 18 1f 18 20  f5 85 18 1e 18 1f 18 21  |....... .......!|
00000010  00 00 02 85 18 1e 18 1f  18 21 00 01 04 82 18 1e  |.........!......|
00000020  18 22 8a 18 23 18 24 18  25 18 26 18 27 18 28 18  |."..#.$.%.&.'.(.|
00000030  29 18 2a 18 2b 18 2c 82  18 1e 18 2d 85 18 2e 18  |).*.+.,....-....|
00000040  2f 18 30 18 31 18 32 82  18 1e 18 33 89 18 34 18  |/.0.1.2....3..4.|
00000050  35 18 36 18 37 18 38 18  39 18 3a 18 3b 18 3c 83  |5.6.7.8.9.:.;.<.|
00000060  18 3d 18 3e 18 3f 03 84  18 40 18 41 00 18 42 fb  |.=.>.?...@.A..B.|
00000070  40 50 06 66 66 66 66 66                           |@P.fffff|
00000078
perl -E 'use CBOR::XS; use Compress::LZF; print compress_best encode_cbor [
   [30, 31, 32] => Types::Serialiser::true,
   [30, 31, 33, 0, 0] => 2,
   [30, 31, 33, 0, 1] => 4,
   [30, 34] => [35, 36, 37, 38, 39, 40, 41, 42, 43, 44],
   [30, 45] => [46, 47, 48, 49, 50],
   [30, 51] => [52, 53, 54, 55, 56, 57, 58, 59, 60],
   [61, 62, 63] => 3,
   [64, 65, 0, 66] => 64.1,
]' | hd                                                                        
00000000  78/09 90 83 18 1e 18 1f  18 20 f5 85#60 07/03 21  |x........ ..`..!|
00000010  00 00 02#c0 09/02 01 04  82#20 09/15 22 8a 18 23  |......... .."..#|
00000020  18 24 18 25 18 26 18 27  18 28 18 29 18 2a 18 2b  |.$.%.&.'.(.).*.+|
00000030  18 2c#40 19/0b 2d 85 18  2e 18 2f 18 30 18 31 18  |.,@..-..../.0.1.|
00000040  32#40 0f/1f!33 89 18 34  18 35 18 36 18 37 18 38  |2@..3..4.5.6.7.8|
00000050  18 39 18 3a 18 3b 18 3c  83 18 3d 18 3e 18 3f 03  |.9.:.;.<..=.>.?.|
00000060  84 18 40 18/08 41 00 18  42 fb 40 50 06 66#20 00  |..@..A..B.@P.f .|
00000070 /00 66                                             |.f|


TODO


      0  
      0 1 2 3 4 5
     +-+-+-+-+-+-+
     |   0..47   | Integers from 0 to 47, themselves
     +-+-+-+-+-+-+

      0          |    
      0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+
     |1 1 0 0| Biased Value  | Integer Values from 48 to 303  48 + 256 = 304
     +-+-+-+-+-+-+-+-+-+-+-+-+

      0          |        1  |
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |1 1 0 1|       Biased Value        | 304 ... 16687    304 + 2^14 = 16688
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

      0          |        1  |           |    2
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |1 1 1 0| Value as is (for simplicity), 20 bits |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

      0          |        1  |           |    2      |
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |1 1 1 1|       Value as is (for simplicity), 26 bits       |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+


Header Opcode Length:

    0x00 - empty string

      0               
      0 1 2 3 4 5 6 7 
     +-+-+-+-+-+-+-+-+
     |    1 .. 48    | Single Sextet 0 .. 47
     +-+-+-+-+-+-+-+-+

      0               
      0 1 2 3 4 5 6 7 
     +-+-+-+-+-+-+-+-+
     |   49 .. 127   | Number of sextets, 2 .. 80
     +-+-+-+-+-+-+-+-+

      0                   1
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |1 0|Number of sextets, 14 bits |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+


      0                   1                   2
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |1 1|        Number of sextets, 22 bits         |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   Serial Code | Action
   ============+==============================================
       0..3    | Append 1..4 times 0x00
       4..7    | Append 1..4 times 0xff
         8     | Prefix next element with CBOR Major 2 length
         9     | Prefix next element with CBOR Major 3 length
        10     | Set up extended argument for backreference: na += 16
        11     | Set up extended argument for backreference: na += 32
        12     | Set up extended argument for backreference: na += 64
        13     | Set up extended argument for backreference: na += 128
        14     | Set up extended argument for backreference: na += 256
   | 0x09   15 | Append 0x21 (CBOR int -2)
   | 0x10   16 | Append 0x20 (CBOR int -1)
   | 0x11   17 | Append 0x01 (CBOR int 1)
   | 0x12   18 | Append 0x02 (CBOR int 2)
   | 0x13   19 | Append 0x03 (CBOR int 3)
   | 0x14   20 | Append 0xf4 (CBOR false)
   | 0x15   21 | Append 0xf5 (CBOR true)
   | 0x16   22 | Append 0xf6 (CBOR null)
   | 0x17   23 | Append 0x2c (comma, CBOR -13, SSH list separator) 
   | 0x18   24 | RLE: repeat last output
   | 0x19   25 | RLE: repeat last output 2 times
   ------------+---------------------------------------------
    for N>=26:  R = 0 | Append atom with number M
      if even,        |
         set:   R = 2 | Append M+1 content bytes
    M=(N-26)/4        |
    R=(N-26)%4        |
                      | Backreference: n = na + (B % 16), s = (B / 16) + n,
      if odd,         | append n bytes from previously output bytes,
       set B=(N-26)/2 | starting s bytes to the left of the current
                      | output pointer; set na = 0


TODO

=========== Format with VarInt15 instead of VarNibbles =====

as in bytes, no header area
..or VarInt22 ? or make it not int but just short/mid/long


      0               
      0 1 2 3 4 5 6 7 
     +-+-+-+-+-+-+-+-+
     |0| Short codes | 
     +-+-+-+-+-+-+-+-+

      0                   1
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |1|0 0 0|Atom number, 0 .. 4095 |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

      0                   1
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |1|Len-1|Backreference offset-1 | non-zero 3 bits, that is, 0x9..0xe
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

      0                   1                   2
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |1|1 1 1|Backreference offset-1 |  Length - 9   |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   +----------+----------------------------------------------+----------+
   |  short   | Action                                       | Argument |
   |  code    |                                              |          |
   +----------+----------------------------------------------+----------+
   | 0kkkkkkk | Append k = 0b0kkkkkkk + 1 bytes of data in   | k bytes  |
   |          | the bytecode argument; k <= 80               | of data  |
   |          |                                              |          |
   | 0101kkkk | Append k = 0b0kkkk bytes of data in the      | k bytes  |
   |          | bytecode argument, prefixed with their       | of data  |
   |          | length in CBOR Major Type 2 (k+1 total);     |          |
   |          | that is, first byte is 0x4k                  |          |
   |          |                                              |          |
   | 011rrvvv | Append n = 0b0rr + 1 identical bytes with    |          |
   |          | value from table below; n is 1, 2 or 3 so    |          |
   |          | rr is 0b000 to 0b010                         |          |
   |          |                                              |          |
   | 01111011 | Append byte 0xd6 (Tag cbor-packed)           |          |
   |          |                                              |          |
   | 01111100 | Append byte 0x2c (ASCII comma "," which is   |          |
   |          | list separator in SSH)                       |          |
   |          |                                              |          |
   | 01111101 | Append two bytes 0xd8 0x19 (Tag stringref)   |          |
   |          |                                              |          |
   | 0111111a | stop code - end of compressed data;          |          |
   |          | if a=0 then add all remaining literal bytes  |          |
   |          | if a=1 then just stop                        |          |
   +----------+----------------------------------------------+----------+


   vvv | Byte  | Commentary 
   ====+=======+==========================
    0  | 0x00  | CBOR Integer 0
    1  | 0x01  | CBOR Integer 1
    2  | 0x02  | CBOR Integer 2
    3  | 0x20  | CBOR Integer -1
    4  | 0xf4  | CBOR false
    5  | 0xf5  | CBOR true
    6  | 0xf6  | CBOR null
    7  | 0xff  | also commonly occurs repeated
    
   An uncompressed length before CBAR raw stream is encoded as single UTF-8
   character as it was in [RFC 2279], that is, allowing values up to 2^31-1
   in six bytes. Length 0 means that no compression was achieved, so remaining
   data should be copied to output buffer as is, without applying
   decompression. Stop codes allow to add data such as a checksum at end of
   stream. If such checksum, or CRC, or hash, is used, then it MUST cover
   uncompressed data. If space constraints are serious, but 16-bit
   checksums/CRCs are considered weak, then CRC-24 [RFC 4880] could be
   recommended.

TODO

=========== Two-pass Format: LZF + Atoms =====

   External format: use Compress::LZF as is

   Internal pass: for CBOR, use unused codes 28..30 in each Major Type. For
   integers, it's shorter one (e.g. 3-byte), for each string type, prefix it
   with atom length as prescribed by CBOR, for tags, put common like
   stringref, and in special, make generic escape mechanism:

   e.g. 0xfc to escape one byte
   0xfd - extended escape, and e.g. for atoms in middle of strings

TBD what extended escapes?

TBD if 3 codes in each type, are 768 atoms enough? may reuse from map/array,
but isn't just 1535 коряво?

TODO what should be internal pass for non-CBOR but just SSH blob?
and need some another format for uncompressed length prefix

TBD if literal in CBOR, then this means unsupported so switching back to CBOR
cannot be reliable?

so:
  FC - copy 2+ bytes literal
  FD - dispense (decompress) atom
  FE - escape a single byte

and all 0xFx codes switch off CBOR going to BLOB mode

TBD is VarInt15 enough for atom number and FC length and in byte strings?

need we preserve indefinite-length strings with atoms inside? probably yes,
ULP may have crypto etc.

TBD may be simply wait for draft-cbor-packed to settle instead of "atom
surrounded in string"?

 |  Taking into account the encoding of these referring data items, there
 |  are 16 one-byte references, 48 two-byte references, 512 three-byte
 |  references, 131072 four-byte references, etc.  As CBOR integers can
 |  grow to very large (or very negative) values, there is no practical
 |  limit to how many shared items might be used in a Packed CBOR item.

TBD cbor-packed is less effective in Tag 6, however, what if replace unused codes
with Tag 6, e.g. 0x5C A0 being equivalent to d6 18 a0 ?

huh, the task of several atoms in a bytestring is almost equivalent to non-CBOR BLOB

possible solution:
  * for BLOB media type, initialize "remaining_bytes" to entire length, and go
    to INBLOB state
  * in CBOR state every opcode is allowed, and special one for strings emits
    CBOR string prefix, then sets remaining_bytes to string's length
  * in BLOB state, only FC/FD/FE allowed, any other MUST throw error, and
    decrement remaining_bytes for every emitted piece
  * when remaining_bytes becomes zero, go back to CBOR state

so, for strings:

  5C - 2+ byte length (varint) BLOB state inside
  5D - decompress one atom
  5E - single byte length BLOB state inside

and same for UTF-8 text strings (7C/7D/7E)

TBD what if use simple(0)..simple(15) for first atoms? so mb change varint to 240
- that may substitute CBOR fragment as-is, so requires stricter typing in atom
  setup, that is, InternAtom/GetAtomName/ReleaseAtom
  - use VarNibbles record format there? differentiate CBAR and CBAP?

=== 15.12.24:

packing of CBOR sequences - cbor-packed not, CBAR allows

pre-setup - possible e.g. as CBOR sequence
TBD use 22098 for recursive "after unpacking, there are more CBAR inside"?
TBD alternatives (tag 121) for multiple dictionaries?

  The format is described in terms of unpacker copying data from input to
  target unpacked CBOR which later can be feed to generic CBOR decoder,
  however, it is possible, though hard, to implement in-place access to
  CBAR data (like in draft-cbor-packed), if application wish so and is
  constrained in RAM but not ROM.

in atom table - allow #6.10 for CBAR as atom definition, that is, to reference
earlier atoms

   CBAR-CBOR = #6.10([atoms, bytedict, CBAR, checksum])  ; Tag 0x0a for "Atom"
             / #6.10(CBAR)    ; binary string - everything other setup earlier

   atomarr = [ + atom ]       ; "atom" is like in X11 sense - number of string
   atom = bstr                ; raw value
        / #6.10(bstr)         ; itself CBAR - definition uses previous atoms
	/ any                 ; valid CBOR fragment to substitute

   atoms = atomarr / uint / bstr,    ; atoms array (mb empty) or their hash
   bytedict = bstr / uint,           ; byte dictionary (mb empty) or it's hash
   CBAR = bstr .size (9..),
   ? checksum = uint

In atom definitions, each definition MUST use only prior atom numbers if it's
CBAR itself.

original: 78 32 "http://192.168.1.103:8445/wot/thing/MyLED/ledOnOff"
226("ledOnOff") == D8 E2 68 'ledOnOff'
                   7E 32 FD nn FC 08 'ledOnOff'

why extended code to enter IN_BLOB ? enter on usual tstr/bstr and *scan*:
78 32 FD nn 'ledOnOff'

for map merging, tag 63 Encoded CBOR Sequence may be used,
cbor-records 57342-57599 also instead of tag 114

  Opcodes of IN_BLOB state:

  C0             - Atom 0
  C1             - Atom 1
  F5             - Atom 2
  F6             - Atom 3
  F7             - Atom 4
  F8             - Atom 5
  F9             - Atom 6
  FA             - Atom 7
  FB             - Atom 8
  FC <VarUInt30> - Copy N Literal bytes, N MUST be greater than 1
  FD <VarUInt30> - Decompress (dispense) atom N
  FE             - Escape next byte (Copy 1 literal byte)
  FF             - Copy remaining_bytes literal bytes
  any other byte - Output this byte

  Any output operation decrements `remaining_bytes` variable by the size of
  chunk output, and in well-formed input it MUST not became less than zero.
  If `remaining_bytes` became zero (0), state is changed to IN_CBOR.

  Rationale: UTF-8 since updated RFC can't encode codepoints higher than
             0x10FFFF, thus bytes higher than 0xF5 can't appear in well-fromed
	     UTF-8, and 0xC0 and 0xC1 also must not appear in conforming
	     UTF-8, thus these bytes could be used inside CBOR Major Type 3
	     (string) without escaping, as atoms often will be part of text
	     strings, not only binary. For applications wanting to trade-off
	     performance to compression ratio, every other byte means itself
	     which allows to scan contents of text string byte-by-byte, saving
	     few bytes - instead, for performance of decoder, FC code with
	     length should be used, allowing to skip to next code.

  Opcodes of IN_CBOR state:

  1C <3 bytes>   - (terCio) Output 1A 00 <3 bytes>
  1D             - Atom 0
  1E             - Atom 1
  1F <5 bytes>   - (Five) Output 1B 00 00 00 <5 bytes>
  3C <3 bytes>   - (terCio) Output 3A 00 <3 bytes>
  3D             - Atom 2
  3E             - Atom 3
  3F <5 bytes>   - Five-integer: Output 3B 00 00 00 <5 bytes>
  5C <VarUInt30> - Convert atom N to binary string
  5D             - Atom 4
  5E             - Atom 5
  7C <VarUInt30> - Convert atom N to text string
  7D             - Atom 6
  7E             - Atom 7
  9C             - Atom 8
  9D             - Atom 9
  9E             - Atom 10
  BC             - Atom 11
  BD             - Atom 12
  BE             - Atom 13
  DC             - Atom 14
  DD             - Atom 15
  DE             - Atom 16
  DF             - Atom 17
  FC <VarUInt30> - Copy N Literal bytes, N MUST be greater than 1
  FD <VarUInt30> - Decompress (dispense) atom N, N>17
  FE             - Extended functions (reserved)

  Decoder in IN_CBOR state expects same codepoints as in standard-conformant
  CBOR, plus actions from the table above. That is, on every standard element,
  it's length analyzed, and, for all opcodes except strings, corresponding
  number of bytes is output without interpreting - that is, these opcodes are
  meaningful only at start of CBOR element, or compressed substitution of that
  element, and not significant inside them (as in CBOR itself).

  For standard CBOR text and byte strings opcodes, after output of element
  header, decoder initializes `remaining_bytes` variable to length of element
  contents and switches to IN_BLOB state with other opcode set, leaving it
  back to IN_CBOR state when element is finished.

  For example, consider text string "foobarbaz1foobarbaz2foobarquux". It has
  CBOR encoding - original uncompressed text - as:

    78 1E 666F6F62617262617A 31 666F6F62617262617A 32 666F6F62617271757578

  Suppose atom number 20 has value "foobarbaz" and atom number 3 value
  "foobarquux". Then in CBAR form it will be:

    78 1E  FD 14  31  FD 14  31  3E

  Here, decoder sees standard CBOR prologue of 30-byte text string, outputs
  it, initializes `remaining_bytes` variable to 30 (0x1e) and goes to IN_BLOB
  state. Then it sees FD command to output atom, which argument is 0x14,
  decimal 20 (in our example numbers are small enough for VarInt to fit in
  a byte). It outputs contents of atom 20, and decrements `remaining_bytes` by
  length of atom, 9. Then it sees plain 0x31 byte, outputs it, decrementing
  `remaining_bytes` by 1. Process repeats with next atom and byte 0x31.
  Finally, there is 0x3E, short single-byte opcode for atom 3, which is output
  and `remaining_bytes` variable reaches 0 as length of atom 3 matches it. So
  decoder exit IN_BLOB state and expects start of next CBOR element after this
  string.

  Note that FC and FD opcodes are same in both states. This is two-fold: it
  allows CBAR to skip over (copy as is) new CBOR opcodes, conflicting with
  CBAR, if such will appear in the future, and - more importantly - it allows
  to paste atoms or literals as CBOR fragments. For example, this allows for
  CBOR sequences or copying incomplete CBOR structures, like fragments of
  unclosed (unfinished) array or maps. It is possible because on each step,
  decoder do not check CBOR to be structurally valid (though it SHOULD do so
  for final document) - it just expects next CBOR element and nothing more.

  Opcodes 5C and 7C used for "type conversion": as atoms are binary strings,
  often it's common for entire CBOR element to consist of single atom. In this
  case, specifying length and then going to IN_BLOB state emits more bytes and
  processing, because length of atom is already known. Thus, e.g. 7C and atom
  number is converted on output to proper CBOR element header of atom length,
  folowed by atom contents. For example, if atom 13 is "outputData", then
  7C 0D is expanded to 7A 6F 75 74 70 75 74 44 61 74 - 7A corresponds to
  length of 10 bytes of atom contents.

  Tag #6.10 may be applied not only to entire array (which is logically
  substituted to enclosing CBOR after uncompressing) but also to binary
  string. This is used for atom setup table to use previously defined atoms.
  If an atom is simple CBOR element or structured construct, the it's content
  is not processed, just used as-is. If atom is bstr (Major Type 2) with tag
  #6.10, then it's contents processed (and expanded value then used) by the
  same CBAR unpacking process - but decoder start state is IN_BLOB (instead of
  IN_CBOR for main CBAR) with `remaining_bytes` initialized to infinity and
  error on premature end of input is suppressed. Atoms allowed inside decoding
  such atom are only those atoms defined earlier in this array.

#6.10([
  /atoms/[
    "rgbValue",    #6.10(#2.11 C0 "Red"), #6.10(#2.13 C0 "Green"),
  / 0 (9 bytes)    1 (CA 4B C0 52 65 64)   2 (8 bytes)  /

    #6.10(#2.12 C0 "Blue"), "http://192.168.1.10",
  /  3 (7 bytes)            4 (20 bytes)            /

    #6.10(#2.35 5D "3:8445/wot/thing"), #6.10(#2.42 5E "/MyLED/"),
  /  5 (CA 58 23 5D ..-> 20 bytes )       6 (CA 58 3A 5E ..-> 11 bytes) /

    "name", "@type", "links", "href", "mediaType", "application/json",
  /  7 (5 b)  8 (5 b)  9 (6 b) 10 (5 b)  11 (10 b)   12 (17 b) /

    "outputData",   "valueType",   "type",      "writable",
  / 13 (11 bytes)   14 (10 bytes)  15 (5 bytes)  16 (9 bytes) /

    #6.10(#6.63(#2.18 "outputData": { "valueType": { "type": "number" } } )),
  / 17 (CA D83F 52 6F FD0D A1 49 FD0E A1 44 FD0F 46 6E756D626572 -> 22 b) /

    ["Property"],                  "colorTemperatureChanged",
    / 18 (81 48 68 ..-> 10 bytes)  19 (24 bytes) /
  ],
  /bytedict/"",
  /CBAR/#2.xxx<
  
  ...TODO

  / "outputData": { "valueType": { "type": "boolean" } } /
    7C 0D        A1  7C 0E      A1 7C 0F  67 626F6F6C65616E

  ...TODO
  >
])

TODO
